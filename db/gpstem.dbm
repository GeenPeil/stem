<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.9.0-alpha1" author="Geert-Johan Riemer" last-position="20,103" last-zoom="1"
	 default-schema="public" default-owner="postgres">
<role name="rutte"
      superuser="true"
      login="true"
      password="rutte">
</role>

<database name="gpstem">
</database>

<schema name="public" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<schema name="members" rect-visible="true" fill-color="#e1e1e1">
	<role name="postgres"/>
</schema>

<table name="accounts">
	<schema name="members"/>
	<role name="postgres"/>
	<appended-sql><![CDATA[CREATE OR REPLACE FUNCTION is_adult(members.accounts) RETURNS boolean AS $$
	SELECT date_part('year', age($1.birthdate)) >= 18
$$ VOLATILE LANGUAGE SQL;

CREATE OR REPLACE FUNCTION fee_paid(members.accounts) RETURNS boolean AS $$
	SELECT coalesce(date_part('year', age($1.fee_last_payment_date)) < 1, false)
$$ VOLATILE LANGUAGE SQL;]]></appended-sql>
	<position x="760" y="444"/>
	<column name="id" not-null="true">
		<type name="serial" length="1"/>
	</column>
	<column name="email" not-null="true">
		<type name="varchar" length="200"/>
	</column>
	<column name="nickname">
		<type name="varchar" length="30"/>
		<comment><![CDATA[When NULL, user has never chosen a nickname.]]></comment>
	</column>
	<column name="given_name" not-null="true">
		<type name="varchar" length="100"/>
	</column>
	<column name="first_names" not-null="true" default-value="''">
		<type name="varchar" length="200"/>
		<comment><![CDATA[Separated by space]]></comment>
	</column>
	<column name="initials" not-null="true" default-value="''">
		<type name="varchar" length="20"/>
		<comment><![CDATA[Initials, no separation signs]]></comment>
	</column>
	<column name="last_name" not-null="true">
		<type name="varchar" length="200"/>
		<comment><![CDATA[Includes prefix]]></comment>
	</column>
	<column name="birthdate" not-null="true">
		<type name="date" length="1"/>
	</column>
	<column name="phonenumber" not-null="true" default-value="''">
		<type name="varchar" length="15"/>
	</column>
	<column name="postalcode" not-null="true" default-value="''">
		<type name="varchar" length="10"/>
	</column>
	<column name="housenumber" not-null="true" default-value="''">
		<type name="varchar" length="10"/>
	</column>
	<column name="housenumber_suffix" not-null="true" default-value="''">
		<type name="varchar" length="10"/>
	</column>
	<column name="streetname" not-null="true" default-value="''">
		<type name="varchar" length="200"/>
	</column>
	<column name="city" not-null="true" default-value="''">
		<type name="varchar" length="200"/>
	</column>
	<column name="province" not-null="true" default-value="''">
		<type name="varchar" length="100"/>
	</column>
	<column name="country_id">
		<type name="integer" length="100"/>
	</column>
	<column name="fee_last_payment_date">
		<type name="date" length="1"/>
		<comment><![CDATA[When set to NULL, member has never paid.]]></comment>
	</column>
	<column name="verified_email" not-null="true" default-value="false">
		<type name="boolean" length="0"/>
	</column>
	<column name="verified_identity" not-null="true" default-value="false">
		<type name="boolean" length="1"/>
	</column>
	<column name="verified_voting_entitlement" not-null="true" default-value="false">
		<type name="boolean" length="1"/>
	</column>
	<column name="textsearch_vector">
		<type name="tsvector" length="0"/>
	</column>
	<column name="registration_token" not-null="true">
		<type name="varchar" length="200"/>
	</column>
	<column name="registration_date" not-null="true" default-value="now()">
		<type name="date" length="0"/>
	</column>
	<constraint name="accounts_pk" type="pk-constr" table="members.accounts">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="accounts_uq_email" type="uq-constr" table="members.accounts">
		<columns names="email" ref-type="src-columns"/>
	</constraint>
	<constraint name="accounts_uq_nickname" type="uq-constr" table="members.accounts">
		<columns names="nickname" ref-type="src-columns"/>
	</constraint>
	<constraint name="accounts_check_nickname_length" type="ck-constr" table="members.accounts">
			<expression><![CDATA[char_length(nickname) > 3]]></expression>
	</constraint>
	<constraint name="accounts_check_age_over_14" type="ck-constr" table="members.accounts">
			<expression><![CDATA[date_part('year', age(birthdate)) >= 14]]></expression>
		<comment><![CDATA[One can only become a member at age 14 or older.]]></comment>
	</constraint>
</table>

<function name="accounts_fn_lock_identity"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="members"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[DECLARE
	item_dimension_id integer;
	image_dimension_id integer;
BEGIN
	IF OLD.verified_identity AND NOT NEW.verified_identity THEN 
		RAISE EXCEPTION 'Cannot undo verified identity';
	END IF;
	IF OLD.verified_identity THEN
		IF OLD.initials != NEW.initials THEN
			RAISE EXCEPTION 'Cannot change initials when identity is verified';
		END IF;
		IF OLD.last_name != NEW.last_name THEN
			RAISE EXCEPTION 'Cannot change last_name when identity is verified';
		END IF;
		IF OLD.birthdate != NEW.birthdate THEN
			RAISE EXCEPTION 'Cannot change birthdate when identity is verified';
		END IF;
	END IF;
	RETURN NEW;
END;]]></definition>
</function>

<trigger name="accounts_tr_lock_identity" firing-type="AFTER" per-line="true" constraint="true"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="members.accounts">
		<function signature="members.accounts_fn_lock_identity()"/>
</trigger>

<table name="sessions">
	<schema name="members"/>
	<role name="postgres"/>
	<position x="1480" y="384"/>
	<column name="id" not-null="true">
		<type name="serial" length="1"/>
	</column>
	<column name="account_id" not-null="true">
		<type name="integer" length="1"/>
	</column>
	<column name="token" not-null="true">
		<type name="varchar" length="200"/>
	</column>
	<column name="timeout" not-null="true" default-value="NOW()">
		<type name="timestamp" length="1"/>
	</column>
	<constraint name="sessions_pk" type="pk-constr" table="members.sessions">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="entitlement_proofs">
	<schema name="members"/>
	<role name="postgres"/>
	<position x="1480" y="504"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="account_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="filename" not-null="true">
		<type name="varchar" length="100"/>
	</column>
	<column name="original_filename" not-null="true">
		<type name="varchar" length="200"/>
	</column>
	<constraint name="entitlement_proofs_pk" type="pk-constr" table="members.entitlement_proofs">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="entitlement_proofs_uq_filename" type="uq-constr" table="members.entitlement_proofs">
		<columns names="filename" ref-type="src-columns"/>
	</constraint>
</table>

<function name="accounts_fn_update_textsearch"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="members"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="0"/>
	</return-type>
	<definition><![CDATA[BEGIN
	NEW.textsearch_vector = to_tsvector('english', 
		coalesce(NEW.given_name,'') || ' ' ||
		coalesce(NEW.first_names,'') || ' ' ||
		coalesce(NEW.initials,'') || ' ' ||
		coalesce(NEW.last_name,'') || ' ' ||
		coalesce(NEW.first_names,'') || ' ' ||
		coalesce(NEW.streetname, '') || ' ' ||
		coalesce(NEW.city, ''));
RETURN NEW;
END;
]]></definition>
</function>

<trigger name="accounts_tr_update_textsearch" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="members.accounts">
		<function signature="members.accounts_fn_update_textsearch()"/>
</trigger>

<index name="accounts_index_textsearch_vector" table="members.accounts"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="gin" factor="0">
		<idxelement use-sorting="false">
			<column name="textsearch_vector"/>
		</idxelement>
</index>

<schema name="i8n" rect-visible="true" fill-color="#e1e1e1">
	<role name="postgres"/>
</schema>

<table name="countries">
	<schema name="i8n"/>
	<role name="postgres"/>
	<position x="360" y="140"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="code" not-null="true">
		<type name="char" length="2"/>
	</column>
	<constraint name="countries_pk" type="pk-constr" table="i8n.countries">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="countries_uq_code" type="uq-constr" table="i8n.countries">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="languages">
	<schema name="i8n"/>
	<role name="postgres"/>
	<position x="1280" y="140"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="code" not-null="true">
		<type name="char" length="5"/>
	</column>
	<column name="name" not-null="true">
		<type name="varchar" length="64"/>
	</column>
	<constraint name="languages_pk" type="pk-constr" table="i8n.languages">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="languages_uq_code" type="uq-constr" table="i8n.languages">
		<columns names="code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="country_names">
	<schema name="i8n"/>
	<role name="postgres"/>
	<position x="760" y="220"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="country_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="language_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="name" not-null="true">
		<type name="varchar" length="64"/>
	</column>
	<constraint name="country_names_pk" type="pk-constr" table="i8n.country_names">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="country_names_uq_country_language" type="uq-constr" table="i8n.country_names">
		<columns names="country_id,language_id" ref-type="src-columns"/>
	</constraint>
</table>

<usertype name="enum_mollie_status" configuration="enumeration">
	<schema name="members"/>
	<role name="postgres"/>
	<enumeration values="open,cancelled,expired,failed,pending,paid,paidout,refunded,charged_back"/>
</usertype>

<table name="email_verifications">
	<schema name="members"/>
	<role name="postgres"/>
	<position x="1480" y="780"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="account_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="email" not-null="true">
		<type name="varchar" length="200"/>
	</column>
	<column name="proof" not-null="true">
		<type name="varchar" length="200"/>
	</column>
	<column name="created" not-null="true" default-value="now()">
		<type name="date" length="0"/>
	</column>
	<column name="verified">
		<type name="date" length="0"/>
	</column>
	<constraint name="email_verifications_pk" type="pk-constr" table="members.email_verifications">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<index name="email_verifications_idx_email_proof" table="members.email_verifications"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="0">
		<idxelement use-sorting="false">
			<column name="email"/>
		</idxelement>
		<idxelement use-sorting="true" nulls-first="false" asc-order="true">
			<column name="proof"/>
		</idxelement>
</index>

<table name="payments">
	<schema name="members"/>
	<role name="postgres"/>
	<position x="1480" y="600"/>
	<column name="id" not-null="true">
		<type name="serial" length="0"/>
	</column>
	<column name="account_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="mollie_id" not-null="true">
		<type name="varchar" length="20"/>
	</column>
	<column name="mollie_status" not-null="true">
		<type name="members.enum_mollie_status" length="0"/>
	</column>
	<column name="mollie_created" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="mollie_paid">
		<type name="timestamp" length="0"/>
	</column>
	<column name="created" not-null="true" default-value="now()">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="payments_pk" type="pk-constr" table="members.payments">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
	<constraint name="payments_uq_mollie_id" type="uq-constr" table="members.payments">
		<columns names="mollie_id" ref-type="src-columns"/>
	</constraint>
</table>

<function name="payments_fn_update_account_payment_date"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="members"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="0"/>
	</return-type>
	<definition><![CDATA[BEGIN
	IF NEW.mollie_status = 'paid'::members.enum_mollie_status AND NEW.mollie_status != OLD.mollie_status THEN
		UPDATE members.accounts SET fee_last_payment_date = NEW.mollie_created WHERE id = NEW.account_id;
	END IF;
	RETURN NEW;
END;]]></definition>
</function>

<trigger name="payments_tr_update_account_payment_date" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="members.payments">
		<function signature="members.payments_fn_update_account_payment_date()"/>
</trigger>

<constraint name="accounts_fk_country" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="i8n.countries" table="members.accounts">
	<columns names="country_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="sessions_fk_account" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="members.accounts" table="members.sessions">
	<columns names="account_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="entitlement_proofs_fk_account" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="members.accounts" table="members.entitlement_proofs">
	<columns names="account_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="country_names_fk_country" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="i8n.countries" table="i8n.country_names">
	<columns names="country_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="country_names_fk_language" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="i8n.languages" table="i8n.country_names">
	<columns names="language_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="payments_fk_account" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="members.accounts" table="members.payments">
	<columns names="account_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<constraint name="email_verifications_fk_account" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="members.accounts" table="members.email_verifications">
	<columns names="account_id" ref-type="src-columns"/>
	<columns names="id" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_sessions_accounts" type="relfk"
	 src-table="members.sessions"
	 dst-table="members.accounts"
	 src-required="false" dst-required="false"/>

<relationship name="rel_entitlement_proofs_accounts" type="relfk"
	 src-table="members.entitlement_proofs"
	 dst-table="members.accounts"
	 src-required="false" dst-required="false"/>

<relationship name="rel_county_names_countries" type="relfk"
	 src-table="i8n.country_names"
	 dst-table="i8n.countries"
	 src-required="false" dst-required="false"/>

<relationship name="rel_county_names_languages" type="relfk"
	 src-table="i8n.country_names"
	 dst-table="i8n.languages"
	 src-required="false" dst-required="false"/>

<relationship name="rel_accounts_countries" type="relfk"
	 src-table="members.accounts"
	 dst-table="i8n.countries"
	 src-required="false" dst-required="false"/>

<relationship name="rel_payments_accounts" type="relfk"
	 src-table="members.payments"
	 dst-table="members.accounts"
	 src-required="false" dst-required="false"/>

<relationship name="rel_email_verifications_accounts" type="relfk"
	 src-table="members.email_verifications"
	 dst-table="members.accounts"
	 src-required="false" dst-required="false">
	<label ref-type="name-label">
		<position x="0" y="0"/>
	</label>
</relationship>

</dbmodel>
